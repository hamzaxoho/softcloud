/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5e7b0e7f06e8563f32298de1
*
* You will get 10% discount for each one of your friends
* 
*/
// Dependencies
import React, { Component } from "react";
import { Link } from "react-router-dom";
import Utils from "../utils/utils";

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Material UI
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";

// Custom Actions


// START IMPORT ACTIONS
import ProjectActions from "../redux/actions/ProjectActions";
import EnvironmentActions from "../redux/actions/EnvironmentActions";
import ContainerActions from "../redux/actions/ContainerActions";
import ServiceActions from "../redux/actions/ServiceActions";
import VirtualMachineActions from "../redux/actions/VirtualMachineActions";

// END IMPORT ACTIONS

/** APIs

* actionsProject.create
*	@description CRUD ACTION create
*
* actionsProject.update
*	@description CRUD ACTION update
*	@param ObjectId id - Id
*
* actionsProject.get
*	@description CRUD ACTION get
*	@param ObjectId id - Id resource
*
* actionsUser.findByprojects
*	@description CRUD ACTION findByprojects
*	@param Objectid key - Id of model to search for
*
* actionsEnvironment.list
*	@description CRUD ACTION list
*
* actionsContainer.list
*	@description CRUD ACTION list
*
* actionsService.list
*	@description CRUD ACTION list
*
* actionsVirtualMachine.list
*	@description CRUD ACTION list
*

**/

class ProjectEdit extends Component {
  // Init project
  constructor(props) {
    super(props);
    this.state = {
      project: {}
    };
  }

  // Load data on start
  componentDidMount() {
    if (this.props.match.params.id !== "new") {
      this.props.actionsProject.loadProject(this.props.match.params.id);
      this.props.actionsEnvironment.findByprojects(this.props.match.params.id);
      this.props.actionsUser.findByprojects(this.props.match.params.id);
    }
    
  }

  // Insert props project in state
  componentWillReceiveProps(props) {
    this.setState(...this.state, {
      project: props.project
    });
  }

  // Save data
  save(event) {
    event.preventDefault();
    if (this.state.project._id) {
      this.props.actionsProject.saveProject(this.state.project).then(data => {
        this.props.history.push("/projects/");
      });
    } else {
      this.props.actionsProject.createProject(this.state.project).then(data => {
        this.props.history.push("/projects/");
      });
    }
  }

  // Show content
  render() {
    return (
      <div>
        <h1>Project Edit</h1>
        <form className="myForm" onSubmit={this.save.bind(this)}>

          
          <TextField
            id="Name"
            label="Name"
            value={this.state.project.Name || ""}
            onChange={Utils.handleChange.bind(this, "project")}
            margin="normal"
            fullWidth
            required
            {...(!this.state.project.Name && this.state.project.Name === ""
              ? { error: true }
              : {})}
          />
          
          {/* RELATIONS */}

          {/* EXTERNAL RELATIONS */}
          
          {/* External relation with Environment */}
          
          <h3>Environment</h3>
          {(!this.props.listEnvironment || this.props.listEnvironment.length === 0) && 
            <div>No Environment associated</div>
          }
          {this.props.listEnvironment &&
            this.props.listEnvironment.map((item, i) => {
              return (
                <Link to={"/environments/" + item._id} key={item._id}>
                  {item._id}
                </Link>
              );
            })}

          
          {/* External relation with User */}
          
          <h3>User</h3>
          {(!this.props.listUser || this.props.listUser.length === 0) && 
            <div>No User associated</div>
          }
          {this.props.listUser &&
            this.props.listUser.map((item, i) => {
              return (
                <Link to={"/users/" + item._id} key={item._id}>
                  {item._id}
                </Link>
              );
            })}

          
          {/* Footer */}
          <div className="footer-card">
            <Link to="/projects/">Back to list</Link>

            <Button type="submit" variant="contained" color="primary">
              Save
            </Button>
          </div>
        </form>
      </div>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { 
    actionsProject: bindActionCreators(ProjectActions, dispatch),
    actionsEnvironment: bindActionCreators(EnvironmentActions, dispatch),
  };
};

// Validate types
ProjectEdit.propTypes = { 
  actionsProject: PropTypes.object.isRequired,
  actionsEnvironment: PropTypes.object.isRequired,
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    project: state.ProjectEditReducer.project,
    listEnvironment: state.ProjectEditReducer.listEnvironment,
    listUser: state.ProjectEditReducer.listUser
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(ProjectEdit);
