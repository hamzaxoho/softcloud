/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5e7b0e7f06e8563f32298de1
*
* You will get 10% discount for each one of your friends
* 
*/
// Dependencies
import React, { Component } from "react";
import { Link } from "react-router-dom";
import Utils from "../utils/utils";

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Material UI
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import Select from "@material-ui/core/Select";
import MenuItem from "@material-ui/core/MenuItem";
import InputLabel from "@material-ui/core/InputLabel";
import FormControl from "@material-ui/core/FormControl";

// Custom Actions


// START IMPORT ACTIONS
import EnvironmentActions from "../redux/actions/EnvironmentActions";
import ContainerActions from "../redux/actions/ContainerActions";
import ServiceActions from "../redux/actions/ServiceActions";
import VolumeActions from "../redux/actions/VolumeActions";
import ProjectActions from "../redux/actions/ProjectActions";

// END IMPORT ACTIONS

/** APIs

* actionsEnvironment.create
*	@description CRUD ACTION create
*
* actionsEnvironment.update
*	@description CRUD ACTION update
*	@param ObjectId id - Id
*
* actionsEnvironment.get
*	@description CRUD ACTION get
*	@param ObjectId id - Id resource
*
* actionsContainer.findByenvironments
*	@description CRUD ACTION findByenvironments
*	@param Objectid key - Id of model to search for
*
* actionsService.findByenvironments
*	@description CRUD ACTION findByenvironments
*	@param Objectid key - Id of model to search for
*
* actionsVolume.findByenvironments
*	@description CRUD ACTION findByenvironments
*	@param Objectid key - Id of model to search for
*
* actionsProject.list
*	@description CRUD ACTION list
*

**/

class EnvironmentEdit extends Component {
  // Init environment
  constructor(props) {
    super(props);
    this.state = {
      environment: {}
    };
  }

  // Load data on start
  componentDidMount() {
    if (this.props.match.params.id !== "new") {
      this.props.actionsEnvironment.loadEnvironment(this.props.match.params.id);
      this.props.actionsContainer.findByenvironments(this.props.match.params.id);
      this.props.actionsVolume.findByenvironments(this.props.match.params.id);
      this.props.actionsService.findByenvironments(this.props.match.params.id);
    }
    
    this.props.actionsProject.loadProjectList();
  }

  // Insert props environment in state
  componentWillReceiveProps(props) {
    this.setState(...this.state, {
      environment: props.environment
    });
  }

  // Save data
  save(event) {
    event.preventDefault();
    if (this.state.environment._id) {
      this.props.actionsEnvironment.saveEnvironment(this.state.environment).then(data => {
        this.props.history.push("/environments/");
      });
    } else {
      this.props.actionsEnvironment.createEnvironment(this.state.environment).then(data => {
        this.props.history.push("/environments/");
      });
    }
  }

  // Show content
  render() {
    return (
      <div>
        <h1>Environment Edit</h1>
        <form className="myForm" onSubmit={this.save.bind(this)}>

          
          <TextField
            id="Name"
            label="Name"
            value={this.state.environment.Name || ""}
            onChange={Utils.handleChange.bind(this, "environment")}
            margin="normal"
            fullWidth
            required
            {...(!this.state.environment.Name && this.state.environment.Name === ""
              ? { error: true }
              : {})}
          />
          
          {/* RELATIONS */}

          <h2 className="mb-20">Relations</h2>
          
          {/* Relation 1:m projects with Project */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel shrink htmlFor="projects">
              Projects
            </InputLabel>
            <Select
              value={this.state.environment.projects || ""}
              onChange={Utils.handleChangeSelect.bind(this, "environment")}
              inputProps={{
                id: "projects",
                name: "projects"
              }}
              fullWidth
            >
              <MenuItem value="">
                <em>None</em>
              </MenuItem>
              {this.props.listProject && this.props.listProject.map(row => (
                <MenuItem value={row._id} key={row._id}>
                  {row._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          
          {/* EXTERNAL RELATIONS */}
          
          {/* External relation with Container */}
          
          <h3>Container</h3>
          {(!this.props.listContainer || this.props.listContainer.length === 0) && 
            <div>No Container associated</div>
          }
          {this.props.listContainer &&
            this.props.listContainer.map((item, i) => {
              return (
                <Link to={"/containers/" + item._id} key={item._id}>
                  {item._id}
                </Link>
              );
            })}

          
          {/* External relation with Volume */}
          
          <h3>Volume</h3>
          {(!this.props.listVolume || this.props.listVolume.length === 0) && 
            <div>No Volume associated</div>
          }
          {this.props.listVolume &&
            this.props.listVolume.map((item, i) => {
              return (
                <Link to={"/volumes/" + item._id} key={item._id}>
                  {item._id}
                </Link>
              );
            })}

          
          {/* External relation with Service */}
          
          <h3>Service</h3>
          {(!this.props.listService || this.props.listService.length === 0) && 
            <div>No Service associated</div>
          }
          {this.props.listService &&
            this.props.listService.map((item, i) => {
              return (
                <Link to={"/services/" + item._id} key={item._id}>
                  {item._id}
                </Link>
              );
            })}

          
          {/* Footer */}
          <div className="footer-card">
            <Link to="/environments/">Back to list</Link>

            <Button type="submit" variant="contained" color="primary">
              Save
            </Button>
          </div>
        </form>
      </div>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { 
    actionsEnvironment: bindActionCreators(EnvironmentActions, dispatch),
    actionsContainer: bindActionCreators(ContainerActions, dispatch),
    actionsService: bindActionCreators(ServiceActions, dispatch),
    actionsVolume: bindActionCreators(VolumeActions, dispatch),
    actionsProject: bindActionCreators(ProjectActions, dispatch),
  };
};

// Validate types
EnvironmentEdit.propTypes = { 
  actionsEnvironment: PropTypes.object.isRequired,
  actionsContainer: PropTypes.object.isRequired,
  actionsService: PropTypes.object.isRequired,
  actionsVolume: PropTypes.object.isRequired,
  actionsProject: PropTypes.object.isRequired,
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    environment: state.EnvironmentEditReducer.environment,
    listProject: state.EnvironmentEditReducer.listProject,
    listContainer: state.EnvironmentEditReducer.listContainer,
    listVolume: state.EnvironmentEditReducer.listVolume,
    listService: state.EnvironmentEditReducer.listService
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(EnvironmentEdit);
